%{
	#include "ast.hpp"

	extern "C"
	{
		void yyerror(const char *s);
		int yylex(void);
	}
	
	ast* ast_start;
	
%}

%locations


%union { 
	double tipoDouble;
	char* tipoString;
	struct ast* tipoAst;
}

%token AND BREAK DO ELSE ELSEIF END TRUE FALSE FOR FUNCTION IF IN LOCAL NIL NOT OR REPEAT RETURN THEN UNTIL WHILE PUNTOS

%token <tipoString> IDENTIFICADOR
%token <tipoDouble> NUMERO
%token <tipoString> STRING

%left OR
%left AND
%left '<' '>' MENORIGUAL MAYORIGUAL DISTINTO IGUALIGUAL
%left PUNTOPUNTO
%left '+' '-'
%left '*' '/' '%'
%left NOT '#'
%right '^'

%type <tipoAst> chunk block stmt_list stmt_end stmt name_list initializer var_list exp_list opt_exp_list opt_elseif_list opt_else for_stmt
%type <tipoAst> opt_comma_expr var index exp prefixexp function_name dotted_name_list opt_colon_name function_body
%type <tipoAst> function_call args param_list table_constructor table_contents field_list field binop unop

%%

chunk		: block 
			{
				$$ = new ast(_chunk, yylloc.first_line, $1);
				ast_start = $$;
			}
			;

block	 	: stmt_list stmt_end
			{
				$$ = new ast(_block, yylloc.first_line, $1, $2);
			}
			;

/* Lista de sentencias, ';' opcional */

stmt_list	: /* empty */
			{
				$$ = NULL;
			}
			| stmt opt_semicolon stmt_list
			{
				$$ = new ast(_stmt_list, yylloc.first_line, $1, $3);
			}
			;

/* Las ordenes return y break pueden aparecer solo como ultima sentencia dentro de un bloque. Cambia en Version 5.2 */

stmt_end	: /* empty */
			{
				$$ = NULL;
			}
			| RETURN opt_exp_list opt_semicolon
			{
				$$ = new ast(_return, yylloc.first_line, $2);
			}
			| BREAK opt_semicolon
			{
				$$ = new ast(_break, yylloc.first_line);
			}
			;

opt_semicolon	: /* empty */
				| ';'
				;

stmt 	: var_list '=' exp_list
		{
			$$ = new ast(_asign, yylloc.first_line, $1, $3);
		}
		| function_call
		{
			$$ = $1;
		}
		| DO block END
		{
			$$ = $2;
		}
		| WHILE exp DO block END
		{
			$$ = new ast(_while, yylloc.first_line, $2, $4);
		}
		| REPEAT block UNTIL exp
		{
			$$ = new ast(_repeat, yylloc.first_line, $2, $4);
		}
		| IF exp THEN block opt_elseif_list opt_else END
		{
			$$ = new ast(_if, yylloc.first_line, $2, $4, $5, $6);
		}
		| FOR for_stmt
		{
			$$ = $2;
		}
		| FUNCTION function_name function_body
		{
			$$ = new ast(_function, yylloc.first_line, $2, $3);
		}
		| LOCAL FUNCTION IDENTIFICADOR function_body
		{
			valor_nodo aux;
			aux.valor_string = $3;  
			ast* id_nodo = new ast(_id, yylloc.first_line, aux);
			
			$$ = new ast(_local_function, yylloc.first_line, id_nodo, $4);
		}
		| LOCAL name_list initializer
		{
			$$ = new ast(_local_init, yylloc.first_line, $2, $3);
		}
		;

name_list	: IDENTIFICADOR
			{
				valor_nodo aux;
				aux.valor_string = $1;  
				ast* id_nodo = new ast(_id, yylloc.first_line, aux);
				
				$$ = new ast(_name_list, yylloc.first_line, id_nodo);
			}
			| IDENTIFICADOR ',' name_list
			{
				valor_nodo aux;
				aux.valor_string = $1;  
				ast* id_nodo = new ast(_id, yylloc.first_line, aux);
				
				$$ = new ast(_name_list, yylloc.first_line, id_nodo, $3);
			}
			;

initializer	: /* empty */ { $$ = NULL; }
			| '=' exp_list { $$ = $2; }
			;

var_list	: var { $$ = new ast(_var_list, yylloc.first_line, $1); }
			| var ',' var_list { $$ = new ast(_var_list, yylloc.first_line, $1, $3); }
			;

exp_list	: exp
			{
				$$ = new ast(_exp_list, yylloc.first_line, $1);
			}
			| exp ',' exp_list
			{
				$$ = new ast(_exp_list, yylloc.first_line, $1, $3);
			}
			;

opt_exp_list	: /* empty */
				{
					$$ = NULL;
				}
				| exp_list
				{
					$$ = $1;
				}
				;
				
opt_elseif_list	: /* empty */
				{
					$$ = NULL;
				}
				| ELSEIF exp THEN block opt_elseif_list
				{
					$$ = new ast(_elseif_list, yylloc.first_line, $2, $4, $5);
				}
				;

opt_else	: /* empty */ 	{ $$ = NULL;}
			| ELSE block 	{ $$ = $2;	}
			;
			
for_stmt	: IDENTIFICADOR '=' exp ',' exp opt_comma_expr DO block END
			{
				valor_nodo aux;
				aux.valor_string = $1;  
				ast* id_nodo = new ast(_id, yylloc.first_line, aux);
				
				$$ = new ast(_for_1, yylloc.first_line, id_nodo, $3, $5, $6, $8);
			}
			| name_list IN exp_list DO block END
			{
				$$ = new ast(_for_2, yylloc.first_line, $1, $3, $5);
			}
			;
			
opt_comma_expr	: /* empty */	{ $$ = NULL;}
				| ',' exp		{ $$ = $2;	}
				;
			
var 	: IDENTIFICADOR
		{
			valor_nodo aux;
			aux.valor_string = $1;  
			$$ = new ast(_id, yylloc.first_line, aux);
		}
		| prefixexp index
		{			
			$$ = new ast(_var_2, yylloc.first_line, $1, $2);
		}
		;

index	: '[' exp ']' { $$ = $2 }
		| '.' IDENTIFICADOR
		{
			valor_nodo aux;
			aux.valor_string = $2;  
			$$ = new ast(_id, yylloc.first_line, aux);
		}
		;

exp 	: NIL 							{ $$ = new ast(_null, yylloc.first_line);	}
		| FALSE 						
                { 
                    valor_nodo aux;
                    aux.valor_bool = false;  
                    $$ = new ast(_false, yylloc.first_line, aux); 
                }
		| TRUE 							
                { 
                    valor_nodo aux;
                    aux.valor_bool = true;
                    $$ = new ast(_true, yylloc.first_line, aux); 	
                }
		| NUMERO 						
		{ 
			valor_nodo aux;
			aux.valor_double = $1;  
			$$ = new ast(_number, yylloc.first_line, aux); 	
		}
		| STRING
		{ 
			valor_nodo aux;
			aux.valor_string = $1;  
			$$ = new ast(_string, yylloc.first_line, aux); 	
		}		
		| PUNTOS /* '...' */			{ $$ = new ast(_ppp, yylloc.first_line); 	}
		| FUNCTION function_body		{ $$ = $2;			 	}
		| prefixexp 					{ $$ = $1; 				}
		| table_constructor 			{ $$ = $1; 				}
		| binop							{ $$ = $1;				} 
		| unop							{ $$ = $1;				}
		;
		
prefixexp 	: var 			{ $$ = $1; }
			| function_call { $$ = $1; }
			| '(' exp ')'	{ $$ = $2; }
			;

function_name	: dotted_name_list opt_colon_name { $$ = new ast(_function_name, yylloc.first_line, $1, $2); }
				;

dotted_name_list	: IDENTIFICADOR
					{
						valor_nodo aux;
						aux.valor_string = $1;  
						ast* id_nodo = new ast(_id, yylloc.first_line, aux);
				
						$$ = new ast(_name_list, yylloc.first_line, id_nodo);
					}
					| IDENTIFICADOR '.' dotted_name_list
					{
						valor_nodo aux;
						aux.valor_string = $1;  
						ast* id_nodo = new ast(_id, yylloc.first_line, aux);
						
						$$ = new ast(_name_list, yylloc.first_line, id_nodo, $3);
					}
					;

opt_colon_name	: /* empty */ { $$ = NULL; }
				| ':' IDENTIFICADOR
				{
					valor_nodo aux;
					aux.valor_string = $2;  
					$$ = new ast(_id, yylloc.first_line, aux);
				}
				;

function_body	: '(' param_list ')' block END { $$ = new ast(_function_body, yylloc.first_line, $2, $4); }
				;

function_call	: prefixexp args { $$ = new ast(_function_call, yylloc.first_line, $1, $2); }
				| prefixexp ':' IDENTIFICADOR args 
				{
					valor_nodo aux;
					aux.valor_string = $3;  
					ast* id_nodo = new ast(_id, yylloc.first_line, aux);

					$$ = new ast(_function_call, yylloc.first_line, $1, id_nodo, $4); 
				}
				;

args	: '(' opt_exp_list ')' 	{ $$ = $2; } 
		| table_constructor 	{ $$ = $1; }
		| STRING
		{ 
			valor_nodo aux;
			aux.valor_string = $1;  
			$$ = new ast(_string, yylloc.first_line, aux); 	
		}
		;

param_list 	: /* empty */ 			{ $$ = NULL; }	
			| PUNTOS 				{ $$ = new ast(_ppp, yylloc.first_line); }
			| name_list				{ $$ = $1; }			
			| name_list ',' PUNTOS 	{ $$ = new ast(_param_list_4, yylloc.first_line, $1); }
			;

table_constructor	: '{' table_contents '}' { $$ = $2 }
					;

table_contents	: /* empty */ { $$ = NULL; }
				| field_list opt_field_sep { $$ = $1; }
				;

field_list 	: field { $$ = new ast(_field_list, yylloc.first_line, $1); }
			| field fieldsep field_list { $$ = new ast(_field_list, yylloc.first_line, $1, $3); }
			;
			
field 	: '[' exp ']' '=' exp { $$ = new ast(_field_1, yylloc.first_line, $2, $5); }
		| IDENTIFICADOR '=' exp	
		{
			valor_nodo aux;
			aux.valor_string = $1;  
			ast* id_nodo = new ast(_id, yylloc.first_line, aux);
			
			$$ = new ast(_field_2, yylloc.first_line, id_nodo, $3); 
		}
		| exp { $$ = $1; }
		;

opt_field_sep	: /* empty */
				| fieldsep
				;

fieldsep 	: ',' 
			| ';'
			;

binop 	: exp OR exp			{ $$ = new ast(_binop,_or, yylloc.first_line, $1, $3); 			}
		| exp AND exp			{ $$ = new ast(_binop,_and, yylloc.first_line, $1, $3); 			}
		| exp '<' exp			{ $$ = new ast(_binop,_menor, yylloc.first_line, $1, $3); 		}
		| exp '>' exp			{ $$ = new ast(_binop,_mayor, yylloc.first_line, $1, $3); 		}
		| exp MENORIGUAL exp	{ $$ = new ast(_binop,_menorigual, yylloc.first_line, $1, $3); 	}
		| exp MAYORIGUAL exp	{ $$ = new ast(_binop,_mayorigual, yylloc.first_line, $1, $3); 	}
		| exp DISTINTO exp		{ $$ = new ast(_binop,_distinto, yylloc.first_line, $1, $3); 	}
		| exp IGUALIGUAL exp	{ $$ = new ast(_binop,_igualigual, yylloc.first_line, $1, $3); 	}
		| exp PUNTOPUNTO exp	{ $$ = new ast(_binop,_puntopunto, yylloc.first_line, $1, $3); 	}
		| exp '+' exp			{ $$ = new ast(_binop,_mas, yylloc.first_line, $1, $3); 			}
		| exp '-' exp			{ $$ = new ast(_binop,_menos, yylloc.first_line, $1, $3); 		}
		| exp '*' exp			{ $$ = new ast(_binop,_mul, yylloc.first_line, $1, $3); 			}
		| exp '/' exp			{ $$ = new ast(_binop,_div, yylloc.first_line, $1, $3); 			}
		| exp '%' exp			{ $$ = new ast(_binop,_mod, yylloc.first_line, $1, $3); 			}
		| exp '^' exp			{ $$ = new ast(_binop,_exp, yylloc.first_line, $1, $3); 			}
		;

unop 	: NOT exp				{ $$ = new ast(_unop,_not, yylloc.first_line, $2); 			}
		| '#' exp				{ $$ = new ast(_unop,_numeral, yylloc.first_line, $2); 		}
		| '-' exp %prec NOT		{ $$ = new ast(_unop,_menos, yylloc.first_line, $2); 		}
		;

%%

int main(void)
{
	yyparse();
        ejecutar(ast_start);
	ast_start->free();
}




